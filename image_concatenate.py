import os
import re
from PIL import Image
import numpy as np
import torch

def load_image(image_path):
    try:
        i = Image.open(image_path)
        i = i.convert("RGB")
        image = np.array(i).astype(np.float32) / 255.0
        image = torch.from_numpy(image)[None,]
        return image
    except Exception as e:
        print(f"Error loading image: {image_path}")
        print(e)
        return None

class ConcatenateImagesByDirectory:
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "image_paths": ("STRING", {"multiline": True, "forceInput": True}),
                # –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏–ª –±–∞–∑–æ–≤–æ–µ –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è,
                # –Ω–∞–ø—Ä–∏–º–µ—Ä "0" –∏–ª–∏ "asd". –ï—Å–ª–∏ –±—É–¥–µ—Ç –≤–≤–µ–¥—ë–Ω –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∏–ª–∏ –∏–º—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º,
                # –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–≥–æ.
                "base_image_name": ("STRING", {"default": "0", "placeholder": "–Ω–∞–ø—Ä–∏–º–µ—Ä, 0 –∏–ª–∏ asd"}),
            },
        }

    RETURN_TYPES = ("IMAGE",)
    OUTPUT_IS_LIST = (True,)
    FUNCTION = "concatenate_images"
    CATEGORY = "üòé SnJake/Utils"
    INPUT_IS_LIST = True

    def concatenate_images(self, image_paths, base_image_name):
        # –ï—Å–ª–∏ base_image_name —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        if isinstance(base_image_name, list):
            base_image_name = base_image_name[0]
        # –ï—Å–ª–∏ base_image_name —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç—å –∏–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–æ–µ –∏–º—è
        base_image_name = os.path.splitext(os.path.basename(base_image_name))[0]
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—É—Ç–∏ –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
        image_groups = {}
        for path in image_paths:
            path = os.path.normpath(path)
            directory = os.path.dirname(path)
            if directory not in image_groups:
                image_groups[directory] = []
            image_groups[directory].append(path)

        final_images = []

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        for directory, paths in image_groups.items():
            base_image_path = None
            other_images = []

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∏–º–µ–Ω–∞ –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏—â–µ–º jpg –∏ png)
            expected_names = [
                f"{base_image_name.lower()}.jpg",
                f"{base_image_name.lower()}.png"
            ]

            # –ü–æ–∏—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            try:
                directory_files = os.listdir(directory)
            except Exception as e:
                print(f"Warning: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {directory}")
                continue

            for file_name in directory_files:
                if file_name.lower() in expected_names:
                    base_image_path = os.path.join(directory, file_name)
                    break

            if base_image_path is None:
                print(f"Warning: No base image '{expected_names[0]}' or '{expected_names[1]}' found in directory: {directory}")
                continue

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ (–∫—Ä–æ–º–µ –±–∞–∑–æ–≤–æ–≥–æ)
            for path in paths:
                if os.path.normpath(path) == os.path.normpath(base_image_path):
                    continue
                else:
                    other_images.append(path)

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ —á–∏—Å–ª–æ–≤–æ–π —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            def get_numeric_part(path):
                match = re.search(r"(\d+)\.(jpg|png|jpeg|webp|bmp|gif)$", path, re.IGNORECASE)
                return int(match.group(1)) if match else float('inf')

            other_images.sort(key=get_numeric_part)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            base_image = load_image(base_image_path)
            if base_image is None:
                print(f"Warning: could not load base image: {base_image_path}")
                continue

            # –ï—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç, –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
            if len(other_images) == 0:
                final_images.append(base_image)
            else:
                # –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–∞–∑–æ–≤—ã–º (–ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏)
                for path in other_images:
                    other_image = load_image(path)
                    if other_image is not None:
                        concatenated_image = torch.cat((base_image, other_image), dim=2)
                        final_images.append(concatenated_image)

        # –ï—Å–ª–∏ –∏—Ç–æ–≥–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ—à–∏–±–æ–∫
        return (final_images,)
