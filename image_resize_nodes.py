import torch
import comfy.utils

class SnJakeResizeIfLarger:
    """
    –≠—Ç–∞ –Ω–æ–¥–∞ –∏–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
    —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Å—Ç–æ—Ä–æ–Ω.
    """
    
    FUNCTION = "resize_if_larger"
    CATEGORY = "üòé SnJake/Utils"
    RETURN_TYPES = ("IMAGE",)
    RETURN_NAMES = ("resized_image",)

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "image": ("IMAGE",),
                "target_resolution": ("INT", {
                    "default": 1024, 
                    "min": 64, 
                    "max": 8192,
                    "step": 8,
                }),
                "keep_aspect_ratio": ("BOOLEAN", {
                    "default": True, 
                    "label_on": "enabled", 
                    "label_off": "disabled"
                }),
                # 2. –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–¥–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö comfy.utils.common_upscale
                "upscale_method": (["lanczos", "bicubic", "bilinear", "nearest-exact", "area"], {
                    "default": "lanczos"
                }),
            }
        }

    def resize_if_larger(self, image, target_resolution, keep_aspect_ratio, upscale_method):
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –±–∞—Ç—á–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. image.shape: [B, H, W, C]
        _batch, height, width, _channels = image.shape

        # --- –£–°–õ–û–í–ò–ï –ü–†–û–í–ï–†–ö–ò ---
        if height <= target_resolution and width <= target_resolution:
            print(f"SnJake Resize: Image is {width}x{height}, which is within the {target_resolution}px limit. Skipping.")
            return (image,)

        print(f"SnJake Resize: Resizing image from {width}x{height} to target ~{target_resolution}px using {upscale_method}")

        if keep_aspect_ratio:
            if width > height:
                scale_factor = target_resolution / width
            else:
                scale_factor = target_resolution / height
            
            new_width = int(width * scale_factor)
            new_height = int(height * scale_factor)
        else:
            new_width = target_resolution
            new_height = target_resolution

        # –§—É–Ω–∫—Ü–∏–∏ –∏–∑ comfy.utils –æ–∂–∏–¥–∞—é—Ç —Ñ–æ—Ä–º–∞—Ç [B, C, H, W]
        img_bchw = image.permute(0, 3, 1, 2)
        
        # 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ ComfyUI
        # –û–Ω–∞ —Å–∞–º–∞ –≤—ã–∑–æ–≤–µ—Ç –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–∏
        resized_img = comfy.utils.common_upscale(
            img_bchw, 
            new_width, 
            new_height, 
            upscale_method, 
            "disabled"  # –ü–∞—Ä–∞–º–µ—Ç—Ä crop –Ω–∞–º –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –º—ã —Å–∞–º–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∏ —Ä–∞–∑–º–µ—Ä—ã
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –∫ [B, H, W, C]
        resized_img_bhwc = resized_img.permute(0, 2, 3, 1)

        return (resized_img_bhwc,)
