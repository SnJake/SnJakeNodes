import torch

class SnJakeResizeIfLarger:
    """
    –≠—Ç–∞ –Ω–æ–¥–∞ –∏–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
    —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Å—Ç–æ—Ä–æ–Ω.
    """
    
    FUNCTION = "resize_if_larger"
    CATEGORY = "üòé SnJake/Utils"
    RETURN_TYPES = ("IMAGE",)
    RETURN_NAMES = ("resized_image",)

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "image": ("IMAGE",),
                "target_resolution": ("INT", {
                    "default": 1024, 
                    "min": 64, 
                    "max": 8192,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—É–º–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
                    "step": 8,
                }),
                "keep_aspect_ratio": ("BOOLEAN", {
                    "default": True, 
                    "label_on": "enabled", 
                    "label_off": "disabled"
                }),
            }
        }

    def resize_if_larger(self, image, target_resolution, keep_aspect_ratio):
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –±–∞—Ç—á–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. image.shape: [B, H, W, C]
        _batch, height, width, _channels = image.shape

        # --- –£–°–õ–û–í–ò–ï –ü–†–û–í–ï–†–ö–ò ---
        # –ï—Å–ª–∏ –∏ —à–∏—Ä–∏–Ω–∞, –∏ –≤—ã—Å–æ—Ç–∞ —É–∂–µ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω—ã —Ü–µ–ª–µ–≤–æ–º—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é,
        # —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
        if height <= target_resolution and width <= target_resolution:
            print(f"SnJake Resize: Image is {width}x{height}, which is within the {target_resolution}px limit. Skipping.")
            return (image,)

        print(f"SnJake Resize: Resizing image from {width}x{height} to target ~{target_resolution}px")

        if keep_aspect_ratio:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
            # –ù–∞—Ö–æ–¥–∏–º –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –∏ –≤—ã—á–∏—Å–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            if width > height:
                scale_factor = target_resolution / width
            else:
                scale_factor = target_resolution / height
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            new_width = int(width * scale_factor)
            new_height = int(height * scale_factor)
        else:
            # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω, –ø—Ä–æ—Å—Ç–æ —É–∂–∏–º–∞–µ–º/—Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –¥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
            new_width = target_resolution
            new_height = target_resolution

        # –î–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ interpolate –Ω–∞–º –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π –Ω–∞ [B, C, H, W]
        img_bchw = image.permute(0, 3, 1, 2)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        resized_img = torch.nn.functional.interpolate(
            img_bchw, 
            size=(new_height, new_width), 
            mode='bilinear', 
            align_corners=False
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π –æ–±—Ä–∞—Ç–Ω–æ –∫ [B, H, W, C]
        resized_img_bhwc = resized_img.permute(0, 2, 3, 1)

        return (resized_img_bhwc,)
