TELEPORT_DATA = {}

class AlwaysEqualProxy(str):
    def __eq__(self, _):
        return True
    def __ne__(self, _):
        return False

any_type = AlwaysEqualProxy("*")

class SnJake_TeleportSet:
    CATEGORY = "üòé SnJake/Utils"
    FUNCTION = "set_data"
    RETURN_TYPES = (any_type,)
    RETURN_NAMES = ("signal_passthrough",)

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "signal": (any_type, {}),
                "constant": ("STRING", {"default": "default_pipe"}),
            }
        }

    def set_data(self, signal, constant: str):
        if not constant.strip():
            raise ValueError("[SnJake_TeleportSet] –ò–º—è 'constant' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        TELEPORT_DATA[constant] = signal
        return (signal,)

class SnJake_TeleportGet:
    CATEGORY = "üòé SnJake/Utils"
    FUNCTION = "get_data"
    RETURN_TYPES = (any_type,)
    RETURN_NAMES = ("signal",)

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                # –≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
                "constant": ([],),
            },
            # –°–∫—Ä—ã—Ç—ã–π –≤—Ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–µ—Ç –Ω–∞–º –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É –≥—Ä–∞—Ñ—É
            "hidden": {"prompt": "PROMPT"},
        }

    @classmethod
    def IS_CHANGED(cls, **kwargs):
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —É–∑–µ–ª, —á—Ç–æ–±—ã –æ–Ω –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–ª —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        return float("NaN")

    @classmethod
    def VALIDATE_INPUTS(cls, prompt, **kwargs):
        # *** –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò ***
        # –ü–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ
        # Set-—É–∑–ª—ã –≤ –≥—Ä–∞—Ñ–µ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö 'constant'.
        if not prompt:
            return True # –ì—Ä–∞—Ñ –µ—â–µ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ—Å—Ç—Ä–æ–µ–Ω

        available_constants = []
        # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –≤—Å–µ–º —É–∑–ª–∞–º –≤ –≥—Ä–∞—Ñ–µ (prompt)
        for node_id, node_data in prompt.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª –Ω–∞—à–∏–º Set-—É–∑–ª–æ–º
            if node_data.get("class_type") == "SnJake_TeleportSet":
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 'constant' –∏–∑ –µ–≥–æ –≤—Ö–æ–¥–æ–≤
                constant_value = node_data.get("inputs", {}).get("constant")
                if constant_value and isinstance(constant_value, str):
                    available_constants.append(constant_value)

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
        available_constants = sorted(list(set(available_constants)))
        
        if not available_constants:
            available_constants.append("(no channels found)")

        # –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
        selected_constant = kwargs.get("constant")
        if selected_constant not in available_constants:
             return f"Value not in list: constant '{selected_constant}' not in {available_constants}. " \
                    f"Possible race condition or the Set node hasn't been evaluated."

        return True

    def get_data(self, constant: str, prompt):
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —É–∂–µ –ø—Ä–æ—à–ª–∞, —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if constant not in TELEPORT_DATA:
            raise KeyError(
                f"[SnJake_TeleportGet] –ö–∞–Ω–∞–ª '{constant}' –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∑–µ–ª 'SnJake_TeleportSet' —Å —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ –¥–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞."
            )
        signal = TELEPORT_DATA.get(constant)
        return (signal,)

# –û—á–∏—Å—Ç–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
try:
    import execution
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –º–µ—Ç–æ–¥ —É–∂–µ "–æ–±–µ—Ä–Ω—É—Ç"
    if not hasattr(execution.PromptQueue, '_snjake_patched'):
        original_execute = execution.PromptQueue.prototype_execute
        def clear_teleport_data_before_execution(func):
            def wrapper(*args, **kwargs):
                global TELEPORT_DATA
                TELEPORT_DATA.clear()
                return func(*args, **kwargs)
            return wrapper
        execution.PromptQueue.prototype_execute = clear_teleport_data_before_execution(original_execute)
        execution.PromptQueue._snjake_patched = True
except Exception as e:
    print(f"[SnJake Teleport Nodes] Warning: Could not patch PromptQueue for automatic data clearing. {e}")
