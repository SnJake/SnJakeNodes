# /ComfyUI/custom_nodes/snjake_nodes/teleport_nodes.py

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —É–∑–ª–∞–º–∏ –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
# –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏ –æ—á–∏—â–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º.
# –ï–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º, –µ—Å–ª–∏ –ø–æ—Ä—è–¥–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
# –≥—Ä–∞—Ñ–∞ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ Set-—É–∑–µ–ª –≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ Get-—É–∑–ª–æ–º.
TELEPORT_DATA = {}

class AlwaysEqualProxy(str):
    """
    –ü—Ä–æ–∫—Å–∏-–∫–ª–∞—Å—Å –¥–ª—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö. –û–Ω –æ–±—Ö–æ–¥–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤ ComfyUI,
    –ø–æ–∑–≤–æ–ª—è—è —Å–æ–µ–¥–∏–Ω—è—Ç—å –ª—é–±–æ–π –≤—ã—Ö–æ–¥ —Å –≤—Ö–æ–¥–æ–º, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–º —ç—Ç–æ—Ç —Ç–∏–ø.
    –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤/–≤—ã—Ö–æ–¥–æ–≤ "any".
    """
    def __eq__(self, _):
        return True

    def __ne__(self, _):
        return False

any_type = AlwaysEqualProxy("*")

class SnJake_TeleportSet:
    """
    –£–∑–µ–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ("—Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏") –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–º—É –∫–∞–Ω–∞–ª—É.
    –û–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ö–æ–¥—è—â–∏–π —Å–∏–≥–Ω–∞–ª –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ —á–µ—Ä–µ–∑ —Å–µ–±—è
    –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
    """
    CATEGORY = "üòé SnJake/Utils"
    FUNCTION = "set_data"
    RETURN_TYPES = (any_type,)
    RETURN_NAMES = ("signal_passthrough",)

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "signal": (any_type, {}),
                "constant": ("STRING", {"default": "default_pipe"}),
            }
        }

    def set_data(self, signal, constant: str):
        if not constant.strip():
            raise ValueError("[SnJake_TeleportSet] –ò–º—è 'constant' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        TELEPORT_DATA[constant] = signal
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è —Å–∫–≤–æ–∑–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
        return (signal,)

class SnJake_TeleportGet:
    """
    –£–∑–µ–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ("—Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏") –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É–∑–ª–æ–º SnJake_TeleportSet —Å —Ç–µ–º –∂–µ 'constant'.
    """
    CATEGORY = "üòé SnJake/Utils"
    FUNCTION = "get_data"
    RETURN_TYPES = (any_type,)
    RETURN_NAMES = ("signal",)

    @classmethod
    def INPUT_TYPES(cls):
        # JS –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ –±—É–¥–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫.
        # –í Python –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
        return {
            "required": {
                "constant": (["default_pipe"],),
            }
        }

    def get_data(self, constant: str):
        if constant not in TELEPORT_DATA:
            # –≠—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–æ—Ä—è–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
            raise KeyError(
                f"[SnJake_TeleportGet] –ö–∞–Ω–∞–ª '{constant}' –Ω–µ –Ω–∞–π–¥–µ–Ω. "
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∑–µ–ª 'SnJake_TeleportSet' —Å —ç—Ç–∏–º –∫–∞–Ω–∞–ª–æ–º "
                f"–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ –¥–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞."
            )
        
        signal = TELEPORT_DATA.get(constant)
        return (signal,)

# –û—á–∏—Å—Ç–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º –∑–∞–ø—É—Å–∫–æ–º –≥—Ä–∞—Ñ–∞.
# –ú—ã "–æ–±–µ–∑—å—è–Ω—å–∏–º –ø–∞—Ç—á–µ–º" –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ –≤ `PromptQueue`.
try:
    import execution
    def clear_teleport_data_before_execution(func):
        def wrapper(*args, **kwargs):
            global TELEPORT_DATA
            TELEPORT_DATA.clear()
            return func(*args, **kwargs)
        return wrapper

    execution.PromptQueue.prototype_execute = clear_teleport_data_before_execution(execution.PromptQueue.prototype_execute)
except Exception as e:
    print(f"[SnJake Teleport Nodes] Warning: Could not patch PromptQueue for automatic data clearing. {e}")
