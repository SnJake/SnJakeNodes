# /ComfyUI/custom_nodes/snjake_teleport_nodes/teleport_nodes.py

import server
from aiohttp import web

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
TELEPORT_DATA = {}
TELEPORT_CONSTANTS = {"default"} # –ù–∞—á–∏–Ω–∞–µ–º —Å –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫

# --- API –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è JavaScript ---

# –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è Get-–Ω–æ–¥–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
@server.PromptServer.instance.routes.get("/snjake/get_teleport_constants")
async def get_teleport_constants(request):
    return web.json_response(sorted(list(TELEPORT_CONSTANTS)))

# –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è Set-–Ω–æ–¥–æ–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
@server.PromptServer.instance.routes.post("/snjake/add_teleport_constant")
async def add_teleport_constant(request):
    try:
        data = await request.json()
        constant = data.get("constant")
        if constant and isinstance(constant, str):
            constant_clean = constant.strip()
            if constant_clean:
                TELEPORT_CONSTANTS.add(constant_clean)
                return web.json_response({"status": "ok", "message": f"Added '{constant_clean}'"})
        return web.json_response({"status": "error", "message": "Invalid constant"}, status=400)
    except Exception as e:
        return web.json_response({"status": "error", "message": str(e)}, status=500)


# --- –ö–ª–∞—Å—Å—ã –Ω–æ–¥ ---

class AlwaysEqualProxy(str):
    def __eq__(self, _): return True
    def __ne__(self, _): return False

any_type = AlwaysEqualProxy("*")

class SnJake_TeleportSet:
    CATEGORY = "üòé SnJake/Utils"
    RETURN_TYPES = (any_type,)
    RETURN_NAMES = ("signal_passthrough",)
    FUNCTION = "set_value"
    OUTPUT_NODE = True

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "signal": (any_type, {}),
                "constant": ("STRING", {"default": "default"}),
            }
        }

    def set_value(self, signal, constant):
        constant_clean = constant.strip()
        if constant_clean:
            TELEPORT_DATA[constant_clean] = signal
            TELEPORT_CONSTANTS.add(constant_clean)
        return (signal,)


class SnJake_TeleportGet:
    CATEGORY = "üòé SnJake/Utils"
    RETURN_TYPES = (any_type,)
    RETURN_NAMES = ("signal",)
    FUNCTION = "get_value"

    @classmethod
    def INPUT_TYPES(cls):
        # –¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º COMBO. JavaScript –∑–∞–ø–æ–ª–Ω–∏—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–º–∏.
        return {
            "required": {
                "constant": (["default"],),
            }
        }

    def get_value(self, constant):
        value = TELEPORT_DATA.get(constant, None)
        if value is None:
            print(f"\033[93mWarning: [Teleport Get] Signal for channel '{constant}' not found.\033[0m")
        return (value,)
