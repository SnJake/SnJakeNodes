# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
TELEPORT_DATA = {}

class AlwaysEqualProxy(str):
    """–ö–ª–∞—Å—Å-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–∏–ø–∞ ANY, —á—Ç–æ–±—ã ComfyUI –Ω–µ —Ä—É–≥–∞–ª—Å—è –Ω–∞ —Ç–∏–ø—ã."""
    def __eq__(self, _): return True
    def __ne__(self, _): return False

any_type = AlwaysEqualProxy("*")

class SnJake_TeleportSet:
    CATEGORY = "üòé SnJake/Utils"
    RETURN_TYPES = () # –£ Set –Ω–æ–¥—ã –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞, –æ–Ω–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ
    FUNCTION = "set_value"
    OUTPUT_NODE = True # –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–æ–¥–∞ –≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "signal": (any_type, {}),
                "constant": ("STRING", {"default": "default"}),
            }
        }

    def set_value(self, signal, constant):
        constant_clean = constant.strip()
        if constant_clean:
            TELEPORT_DATA[constant_clean] = signal
        # –ù–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ RETURN_TYPES –ø—É—Å—Ç
        return ()


class SnJake_TeleportGet:
    CATEGORY = "üòé SnJake/Utils"
    RETURN_TYPES = (any_type,)
    RETURN_NAMES = ("signal",)
    FUNCTION = "get_value"

    @classmethod
    def INPUT_TYPES(cls):
        # JavaScript –∑–∞–ø–æ–ª–Ω–∏—Ç —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        return {
            "required": {
                "constant": (["default"],),
            }
        }

    def get_value(self, constant):
        value = TELEPORT_DATA.get(constant, None)
        if value is None:
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–æ–¥–∞ Get –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–æ –Ω–æ–¥—ã Set
            print(f"\033[93mWarning: [Teleport Get] –°–∏–≥–Ω–∞–ª –¥–ª—è –∫–∞–Ω–∞–ª–∞ '{constant}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\033[0m")
        return (value,)
