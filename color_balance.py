import torch
from typing import List
import numpy as np

class ColorBalance:
    """
    –£–∑–µ–ª Color Balance (Lift / Gamma / Gain)
    (–∞–Ω–∞–ª–æ–≥ —É–∑–ª–∞ Color Balance –∏–∑ Blender).

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–Ω–∑–æ—Ä–∞ [B, H, W, 3] (RGB) –∏ –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
      - Lift: —Å–º–µ—â–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ –¥–∏–∞–ø–∞–∑–æ–Ω –æ–∫–æ–ª–æ [0, 2]),
      - Gamma: –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –≥–∞–º–º–æ–π (–∑–Ω–∞—á–µ–Ω–∏—è > 0; –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω–∏),
      - Gain: –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—Å–∏–ª–µ–Ω–∏—è).
    –¢–∞–∫–∂–µ –∏–º–µ–µ—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä fac –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ —Å–º–µ—à–∏–≤–∞–Ω–∏—è —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.

    –§–æ—Ä–º—É–ª–∞: 
      out = (image * gain)^(1/gamma) + lift - 1
      final = fac * out + (1 - fac) * image
    """

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "image": ("IMAGE",),
                # Lift –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–∏–∞–ø–∞–∑–æ–Ω [0,2])
                "lift_r": ("FLOAT", {"default": 1.0, "min": 0.0, "max": 2.0, "step": 0.01}),
                "lift_g": ("FLOAT", {"default": 1.0, "min": 0.0, "max": 2.0, "step": 0.01}),
                "lift_b": ("FLOAT", {"default": 1.0, "min": 0.0, "max": 2.0, "step": 0.01}),
                # Gamma –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (–∑–Ω–∞—á–µ–Ω–∏—è > 0)
                "gamma_r": ("FLOAT", {"default": 1.0, "min": 0.01, "max": 5.0, "step": 0.01}),
                "gamma_g": ("FLOAT", {"default": 1.0, "min": 0.01, "max": 5.0, "step": 0.01}),
                "gamma_b": ("FLOAT", {"default": 1.0, "min": 0.01, "max": 5.0, "step": 0.01}),
                # Gain –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                "gain_r": ("FLOAT", {"default": 1.0, "min": 0.0, "max": 5.0, "step": 0.01}),
                "gain_g": ("FLOAT", {"default": 1.0, "min": 0.0, "max": 5.0, "step": 0.01}),
                "gain_b": ("FLOAT", {"default": 1.0, "min": 0.0, "max": 5.0, "step": 0.01}),
                # –§–∞–∫—Ç–æ—Ä —Å–º–µ—à–∏–≤–∞–Ω–∏—è (–æ—Ç 0 –¥–æ 1)
                "fac": ("FLOAT", {"default": 1.0, "min": 0.0, "max": 1.0, "step": 0.01}),
            }
        }

    RETURN_TYPES = ("IMAGE",)
    FUNCTION = "color_balance"
    CATEGORY = "üòé SnJake/Adjustment"

    def color_balance(self, image: torch.Tensor,
                      lift_r: float, lift_g: float, lift_b: float,
                      gamma_r: float, gamma_g: float, gamma_b: float,
                      gain_r: float, gain_g: float, gain_b: float,
                      fac: float) -> List[torch.Tensor]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º—É [B, H, W, 3]
        if image.ndim != 4 or image.shape[-1] != 3:
            raise ValueError("–í—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å —Ñ–æ—Ä–º—É [B, H, W, 3] (RGB)")

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–Ω–∑–æ—Ä—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
        lift = torch.tensor([lift_r, lift_g, lift_b], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        gamma = torch.tensor([gamma_r, gamma_g, gamma_b], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)
        gain = torch.tensor([gain_r, gain_g, gain_b], dtype=image.dtype, device=image.device).view(1, 1, 1, 3)

        # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å ‚Äì –≥–∞–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–æ–π 0
        gamma = torch.clamp(gamma, min=1e-8)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º—É–ª—É: out = (image * gain)^(1/gamma) + lift - 1
        out = torch.pow(image * gain, 1.0 / gamma)
        out = out + lift - 1.0

        # –°–º–µ—à–∏–≤–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ —Ñ–∞–∫—Ç–æ—Ä—É fac
        fac_tensor = torch.tensor(fac, dtype=image.dtype, device=image.device).view(1, 1, 1, 1)
        final = fac_tensor * out + (1 - fac_tensor) * image

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º [0, 1]
        final = torch.clamp(final, 0.0, 1.0)
        return (final,)
