import torch
import comfy.model_management as model_management

class VAEDecodeWithPrecision:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–æ–¥–∞ VAEDecode, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤—Ä—É—á–Ω—É—é –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å (precision)
    –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "vae": ("VAE",),
                "samples": ("LATENT",),
                "precision": (["auto", "fp32", "fp16", "bf16"], {"default": "auto"}),
            }
        }
    RETURN_TYPES = ("IMAGE",)
    FUNCTION = "decode"
    CATEGORY = "üòé SnJake/VAE"

    def decode(self, vae, samples, precision):
        if precision == "auto":
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω 'auto', –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
            # –≠—Ç–æ —Å–∞–º—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
            print("Advanced VAEDecode: Precision 'auto', using default VAE behavior.")
            images = vae.decode(samples["samples"])
            if len(images.shape) == 5:
                images = images.reshape(-1, images.shape[-3], images.shape[-2], images.shape[-1])
            return (images,)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–æ—á–Ω–æ—Å—Ç—å (torch.dtype) –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        if precision == "fp32":
            target_dtype = torch.float32
        elif precision == "fp16":
            target_dtype = torch.float16
        elif precision == "bf16":
            target_dtype = torch.bfloat16
        else:
            # –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ 'auto'
            print(f"Warning: Unknown precision '{precision}', falling back to auto.")
            return self.decode(vae, samples, "auto")

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ PyTorch –≤–Ω—É—Ç—Ä–∏ –æ–±–µ—Ä—Ç–∫–∏ VAE
        model_to_modify = vae.first_stage_model
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—ë –ø–æ–∑–∂–µ
        original_dtype = model_to_modify.dtype
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å —É–∂–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
        if original_dtype == target_dtype:
            print(f"Advanced VAEDecode: VAE already in target precision ({precision}). No change needed.")
            return self.decode(vae, samples, "auto")

        print(f"Advanced VAEDecode: Temporarily casting VAE from {original_dtype} to {target_dtype} for decoding.")
        
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏–º –º–æ–¥–µ–ª—å –≤ —Ü–µ–ª–µ–≤—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
            model_to_modify.to(dtype=target_dtype)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            images = vae.decode(samples["samples"])
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞
            if len(images.shape) == 5:
                images = images.reshape(-1, images.shape[-3], images.shape[-2], images.shape[-1])
                
        finally:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–µ–ª—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            # –≤ –±–ª–æ–∫–µ finally, —á—Ç–æ–±—ã —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
            model_to_modify.to(dtype=original_dtype)
            print(f"Advanced VAEDecode: VAE restored to original precision ({original_dtype}).")

        return (images,)


class VAEEncodeWithPrecision:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–æ–¥–∞ VAEEncode, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤—Ä—É—á–Ω—É—é –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å (precision)
    –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "vae": ("VAE",),
                "pixels": ("IMAGE",),
                "precision": (["auto", "fp32", "fp16", "bf16"], {"default": "auto"}),
            }
        }
    RETURN_TYPES = ("LATENT",)
    FUNCTION = "encode"
    CATEGORY = "üòé SnJake/VAE"

    def encode(self, vae, pixels, precision):
        if precision == "auto":
            print("Advanced VAEEncode: Precision 'auto', using default VAE behavior.")
            return ({"samples": vae.encode(pixels[:,:,:,:3])},)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–æ—á–Ω–æ—Å—Ç—å (torch.dtype)
        if precision == "fp32":
            target_dtype = torch.float32
        elif precision == "fp16":
            target_dtype = torch.float16
        elif precision == "bf16":
            target_dtype = torch.bfloat16
        else:
            print(f"Warning: Unknown precision '{precision}', falling back to auto.")
            return self.encode(vae, pixels, "auto")

        model_to_modify = vae.first_stage_model
        original_dtype = model_to_modify.dtype

        if original_dtype == target_dtype:
            print(f"Advanced VAEEncode: VAE already in target precision ({precision}). No change needed.")
            return self.encode(vae, pixels, "auto")
        
        print(f"Advanced VAEEncode: Temporarily casting VAE from {original_dtype} to {target_dtype} for encoding.")
        
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
            model_to_modify.to(dtype=target_dtype)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            latent = vae.encode(pixels[:,:,:,:3])

        finally:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º VAE –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            model_to_modify.to(dtype=original_dtype)
            print(f"Advanced VAEEncode: VAE restored to original precision ({original_dtype}).")

        return ({"samples": latent},)
