import torch
import comfy.model_management as model_management

class VAEDecodeWithPrecision:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–æ–¥–∞ VAEDecode, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å (precision)
    –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "vae": ("VAE",),
                "samples": ("LATENT",),
                "precision": (["auto", "fp32", "fp16", "bf16"], {"default": "auto"}),
            }
        }
    RETURN_TYPES = ("IMAGE",)
    FUNCTION = "decode"
    CATEGORY = "üòé SnJake/VAE" # –ü–æ–º–µ—â–∞–µ–º –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å

    def decode(self, vae, samples, precision):
        """
        –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –ª–∞—Ç–µ–Ω—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.
        """
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–æ—á–Ω–æ—Å—Ç—å (torch.dtype)
        if precision == "auto":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É ComfyUI –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ dtype
            target_dtype = model_management.vae_dtype(device=vae.device)
        elif precision == "fp32":
            target_dtype = torch.float32
        elif precision == "fp16":
            target_dtype = torch.float16
        elif precision == "bf16":
            target_dtype = torch.bfloat16
        else:
            print(f"Warning: Unknown precision '{precision}', falling back to auto.")
            target_dtype = model_management.vae_dtype(device=vae.device)

        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ VAE
        original_dtype = vae.dtype
        original_model_dtype = vae.first_stage_model.dtype
        
        print(f"Advanced VAEDecode: Decoding with precision {precision} ({target_dtype}). Original was {original_dtype}.")

        try:
            # 3. –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å VAE –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
            # –ú–µ—Ç–æ–¥ vae.decode() –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç vae.dtype –¥–ª—è –∫–∞—Å—Ç–∞ —Ç–µ–Ω–∑–æ—Ä–æ–≤,
            # –ø–æ—ç—Ç–æ–º—É –≤–∞–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –æ–±–∞ –∞—Ç—Ä–∏–±—É—Ç–∞.
            vae.first_stage_model.to(target_dtype)
            vae.dtype = target_dtype
            
            # 4. –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            images = vae.decode(samples["samples"])
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –Ω–æ–¥—ã
            if len(images.shape) == 5:
                images = images.reshape(-1, images.shape[-3], images.shape[-2], images.shape[-1])
                
        finally:
            # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º VAE –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∞—Ç—å
            # —Ä–∞–±–æ—Ç—É –¥—Ä—É–≥–∏—Ö –Ω–æ–¥ –≤ –≤–æ—Ä–∫—Ñ–ª–æ—É.
            vae.first_stage_model.to(original_model_dtype)
            vae.dtype = original_dtype

        return (images,)


class VAEEncodeWithPrecision:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–æ–¥–∞ VAEEncode, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å (precision)
    –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "vae": ("VAE",),
                "pixels": ("IMAGE",),
                "precision": (["auto", "fp32", "fp16", "bf16"], {"default": "auto"}),
            }
        }
    RETURN_TYPES = ("LATENT",)
    FUNCTION = "encode"
    CATEGORY = "üòé SnJake/VAE"

    def encode(self, vae, pixels, precision):
        """
        –ö–æ–¥–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ª–∞—Ç–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.
        """
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–æ—á–Ω–æ—Å—Ç—å (torch.dtype)
        if precision == "auto":
            target_dtype = model_management.vae_dtype(device=vae.device)
        elif precision == "fp32":
            target_dtype = torch.float32
        elif precision == "fp16":
            target_dtype = torch.float16
        elif precision == "bf16":
            target_dtype = torch.bfloat16
        else:
            print(f"Warning: Unknown precision '{precision}', falling back to auto.")
            target_dtype = model_management.vae_dtype(device=vae.device)

        # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ VAE
        original_dtype = vae.dtype
        original_model_dtype = vae.first_stage_model.dtype
        
        print(f"Advanced VAEEncode: Encoding with precision {precision} ({target_dtype}). Original was {original_dtype}.")

        try:
            # 3. –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å VAE
            vae.first_stage_model.to(target_dtype)
            vae.dtype = target_dtype
            
            # 4. –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã RGB)
            latent = vae.encode(pixels[:,:,:,:3])

        finally:
            # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º VAE –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            vae.first_stage_model.to(original_model_dtype)
            vae.dtype = original_dtype

        return ({"samples": latent},)
