import torch

class VAEDecodeWithPrecision:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–æ–¥–∞ VAEDecode, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤—Ä—É—á–Ω—É—é –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å (precision)
    –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è. –í–µ—Ä—Å–∏—è 3, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è.
    """
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "vae": ("VAE",),
                "samples": ("LATENT",),
                "precision": (["auto", "fp32", "fp16", "bf16"], {"default": "auto"}),
            }
        }
    RETURN_TYPES = ("IMAGE",)
    FUNCTION = "decode"
    CATEGORY = "üòé SnJake/VAE"

    def decode(self, vae, samples, precision):
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞
        def default_decode():
            images = vae.decode(samples["samples"])
            if len(images.shape) == 5:
                images = images.reshape(-1, images.shape[-3], images.shape[-2], images.shape[-1])
            return (images,)

        if precision == "auto":
            print("Advanced VAEDecode: Precision 'auto', using default VAE behavior.")
            return default_decode()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–æ—á–Ω–æ—Å—Ç—å
        if precision == "fp32": target_dtype = torch.float32
        elif precision == "fp16": target_dtype = torch.float16
        elif precision == "bf16": target_dtype = torch.bfloat16
        else:
            print(f"Warning: Unknown precision '{precision}', falling back to auto.")
            return default_decode()

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ PyTorch
        model_to_modify = vae.first_stage_model
        
        try:
            # –ù–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
            original_dtype = next(model_to_modify.parameters()).dtype
        except StopIteration:
            # –ï—Å–ª–∏ —É –º–æ–¥–µ–ª–∏ –Ω–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            print("Warning: VAE model has no parameters. Using default behavior.")
            return default_decode()
        
        if original_dtype == target_dtype:
            print(f"Advanced VAEDecode: VAE already in target precision ({precision}). No change needed.")
            return default_decode()

        print(f"Advanced VAEDecode: Temporarily casting VAE from {original_dtype} to {target_dtype} for decoding.")
        
        try:
            model_to_modify.to(dtype=target_dtype)
            images = vae.decode(samples["samples"])
            if len(images.shape) == 5:
                images = images.reshape(-1, images.shape[-3], images.shape[-2], images.shape[-1])
        finally:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–¥–µ–ª—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            model_to_modify.to(dtype=original_dtype)
            print(f"Advanced VAEDecode: VAE restored to original precision ({original_dtype}).")

        return (images,)


class VAEEncodeWithPrecision:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–æ–¥–∞ VAEEncode, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤—Ä—É—á–Ω—É—é –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å (precision)
    –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è. –í–µ—Ä—Å–∏—è 3, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è.
    """
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "vae": ("VAE",),
                "pixels": ("IMAGE",),
                "precision": (["auto", "fp32", "fp16", "bf16"], {"default": "auto"}),
            }
        }
    RETURN_TYPES = ("LATENT",)
    FUNCTION = "encode"
    CATEGORY = "üòé SnJake/VAE"

    def encode(self, vae, pixels, precision):
        def default_encode():
            return ({"samples": vae.encode(pixels[:,:,:,:3])},)

        if precision == "auto":
            print("Advanced VAEEncode: Precision 'auto', using default VAE behavior.")
            return default_encode()

        if precision == "fp32": target_dtype = torch.float32
        elif precision == "fp16": target_dtype = torch.float16
        elif precision == "bf16": target_dtype = torch.bfloat16
        else:
            print(f"Warning: Unknown precision '{precision}', falling back to auto.")
            return default_encode()

        model_to_modify = vae.first_stage_model
        
        try:
            original_dtype = next(model_to_modify.parameters()).dtype
        except StopIteration:
            print("Warning: VAE model has no parameters. Using default behavior.")
            return default_encode()

        if original_dtype == target_dtype:
            print(f"Advanced VAEEncode: VAE already in target precision ({precision}). No change needed.")
            return default_encode()
        
        print(f"Advanced VAEEncode: Temporarily casting VAE from {original_dtype} to {target_dtype} for encoding.")
        
        try:
            model_to_modify.to(dtype=target_dtype)
            latent = vae.encode(pixels[:,:,:,:3])
        finally:
            model_to_modify.to(dtype=original_dtype)
            print(f"Advanced VAEEncode: VAE restored to original precision ({original_dtype}).")

        return ({"samples": latent},)
