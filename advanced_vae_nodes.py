import torch

class VAEDecodeWithPrecision:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–æ–¥–∞ VAEDecode, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤—Ä—É—á–Ω—É—é –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å (precision).
    –í–µ—Ä—Å–∏—è 4: —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–∞–º—è—Ç–∏ ComfyUI.
    """
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "vae": ("VAE",),
                "samples": ("LATENT",),
                "precision": (["auto", "fp32", "fp16", "bf16"], {"default": "auto"}),
            }
        }
    RETURN_TYPES = ("IMAGE",)
    FUNCTION = "decode"
    CATEGORY = "üòé SnJake/VAE"

    def decode(self, vae, samples, precision):
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω 'auto', –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞.
        if precision == "auto":
            images = vae.decode(samples["samples"])
            if len(images.shape) == 5:
                images = images.reshape(-1, images.shape[-3], images.shape[-2], images.shape[-1])
            return (images,)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–æ—á–Ω–æ—Å—Ç—å (torch.dtype) –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        if precision == "fp32": target_dtype = torch.float32
        elif precision == "fp16": target_dtype = torch.float16
        elif precision == "bf16": target_dtype = torch.bfloat16
        else: # –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ 'auto'
            print(f"Warning: Unknown precision '{precision}', falling back to auto.")
            return self.decode(vae, samples, "auto")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –∏–∑ –æ–±–µ—Ä—Ç–∫–∏ VAE
        original_vae_dtype = vae.vae_dtype
        
        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ—Å—Ç—å —É–∂–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
        if original_vae_dtype == target_dtype:
            return self.decode(vae, samples, "auto")

        print(f"Advanced VAEDecode: Temporarily setting VAE precision from {original_vae_dtype} to {target_dtype}.")
        
        try:
            # –ü–æ–¥–º–µ–Ω—è–µ–º –∞—Ç—Ä–∏–±—É—Ç dtype –≤ –æ–±–µ—Ä—Ç–∫–µ VAE.
            # –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –≤—ã–∑–æ–≤–µ—Ç—Å—è vae.decode(), –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π model_management
            # –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –Ω–∞ GPU.
            vae.vae_dtype = target_dtype
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ. ComfyUI —Å–∞–º –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∫–∞—Å—Ç–µ –º–æ–¥–µ–ª–∏.
            images = vae.decode(samples["samples"])
            if len(images.shape) == 5:
                images = images.reshape(-1, images.shape[-3], images.shape[-2], images.shape[-1])
                
        finally:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –≤ –æ–±–µ—Ä—Ç–∫—É VAE
            vae.vae_dtype = original_vae_dtype
            print(f"Advanced VAEDecode: VAE precision restored to {original_vae_dtype}.")

        return (images,)


class VAEEncodeWithPrecision:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–æ–¥–∞ VAEEncode, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –≤—Ä—É—á–Ω—É—é –≤—ã–±–∏—Ä–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å (precision).
    –í–µ—Ä—Å–∏—è 4: —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–∞–º—è—Ç–∏ ComfyUI.
    """
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "vae": ("VAE",),
                "pixels": ("IMAGE",),
                "precision": (["auto", "fp32", "fp16", "bf16"], {"default": "auto"}),
            }
        }
    RETURN_TYPES = ("LATENT",)
    FUNCTION = "encode"
    CATEGORY = "üòé SnJake/VAE"

    def encode(self, vae, pixels, precision):
        if precision == "auto":
            return ({"samples": vae.encode(pixels[:,:,:,:3])},)
            
        if precision == "fp32": target_dtype = torch.float32
        elif precision == "fp16": target_dtype = torch.float16
        elif precision == "bf16": target_dtype = torch.bfloat16
        else:
            print(f"Warning: Unknown precision '{precision}', falling back to auto.")
            return self.encode(vae, pixels, "auto")

        original_vae_dtype = vae.vae_dtype

        if original_vae_dtype == target_dtype:
            return self.encode(vae, pixels, "auto")
        
        print(f"Advanced VAEEncode: Temporarily setting VAE precision from {original_vae_dtype} to {target_dtype}.")
        
        try:
            # –ü–æ–¥–º–µ–Ω—è–µ–º –∞—Ç—Ä–∏–±—É—Ç, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ ComfyUI –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –Ω—É–∂–Ω—ã–π —Ç–∏–ø
            vae.vae_dtype = target_dtype
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            latent = vae.encode(pixels[:,:,:,:3])
        finally:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –≤ –æ–±–µ—Ä—Ç–∫—É VAE
            vae.vae_dtype = original_vae_dtype
            print(f"Advanced VAEEncode: VAE precision restored to {original_vae_dtype}.")

        return ({"samples": latent},)
