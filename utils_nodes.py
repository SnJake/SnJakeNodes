import os
import glob
import random
from PIL import Image, ImageOps
from PIL.PngImagePlugin import PngInfo
import numpy as np
import torch
import json

from pathlib import Path

from comfy_execution.graph import ExecutionBlocker
from comfy_execution.graph_utils import GraphBuilder

class BatchLoadImages:
    """
    –£–∑–µ–ª –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏ –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è.
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ª–æ–≥–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏/—Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã,
    –Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (cached_paths) –±–æ–ª—å—à–µ –Ω–µ—Ç.
    """

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "mode": (["single_image", "incremental_image", "random"], {}),
                "seed": ("INT", {"default": 0, "min": 0, "max": 2**32-1}),
                "index": ("INT", {"default": 0, "min": 0, "max": 150000}),
                "label": ("STRING", {"default": "Batch 001"}),
                "path": ("STRING", {"default": ""}),
                "pattern": ("STRING", {"default": "*"}),
                "allow_RGBA_output": (["false", "true"], {"default": "false"}),

                # <-- –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å "–ø–æ –∫—Ä—É–≥—É"
                "allow_cycle": (["true", "false"], {"default":"true", "label_on":"Cycle On", "label_off":"Cycle Off"}),
            },
            "optional": {
                "filename_text_extension": (["true", "false"], {"default":"true"}),
            }
        }

    RETURN_TYPES = ("IMAGE", "STRING")
    RETURN_NAMES = ("image", "filename_text")
    FUNCTION = "load_batch_images"
    CATEGORY = "üòé SnJake/Utils"

    # ----------------------------------------------------------
    # –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è 'incremental_image' (label -> index)
    # ----------------------------------------------------------
    incremental_counters = {}

    def load_batch_images(
        self, 
        path, 
        pattern="*", 
        index=0, 
        mode="single_image",
        seed=0, 
        label="Batch 001", 
        allow_RGBA_output="false", 
        filename_text_extension="true",
        allow_cycle="true"
    ):
        # 1) –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ë–ï–ó –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        all_files = self._scan_directory(path, pattern)
        if not all_files:
            print(f"[BatchLoadImages] –ü–∞–ø–∫–∞ '{path}' –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É '{pattern}'")
            return (None, None)

        # 2) –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω–¥–µ–∫—Å–∞
        if mode == "single_image":
            if index < 0 or index >= len(all_files):
                print(f"[BatchLoadImages] –ó–∞–ø—Ä–æ—à–µ–Ω index={index}, –Ω–æ –≤ –ø–∞–ø–∫–µ —Ç–æ–ª—å–∫–æ {len(all_files)} —Ñ–∞–π–ª–æ–≤.")
                return (None, None)
            chosen_index = index

        elif mode == "incremental_image":
            if label not in self.incremental_counters:
                self.incremental_counters[label] = 0
            chosen_index = self.incremental_counters[label]

            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞
            if chosen_index >= len(all_files):
                if allow_cycle == "true":
                    # ¬´–ü–æ –∫—Ä—É–≥—É¬ª: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ 0
                    print(f"[BatchLoadImages] –î–ª—è label='{label}' –∏–Ω–¥–µ–∫—Å –¥–æ—Å—Ç–∏–≥ –∫–æ–Ω—Ü–∞ ({chosen_index}). –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ 0 (cycling).")
                    chosen_index = 0
                    self.incremental_counters[label] = 0
                else:
                    # –í—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π
                    print(f"[BatchLoadImages] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –¥–ª—è label='{label}'. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.")
                    return (None, None)

            # –ì–æ—Ç–æ–≤–∏–º –∏–Ω–¥–µ–∫—Å –Ω–∞ —Å–ª–µ–¥. —Ä–∞–∑
            self.incremental_counters[label] += 1

        else:  # mode == 'random'
            random.seed(seed)
            chosen_index = random.randint(0, len(all_files) - 1)

        # 3) –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        img_path = all_files[chosen_index]
        image_tensor = self._load_as_tensor(img_path, allow_RGBA_output == "true")

        # 4) –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É filename
        filename = os.path.basename(img_path)
        if filename_text_extension == "false":
            filename = os.path.splitext(filename)[0]

        return (image_tensor, filename)

    @classmethod
    def IS_CHANGED(cls, **kwargs):
        """
        –ï—Å–ª–∏ mode != single_image, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º NaN, —á—Ç–æ–±—ã ComfyUI –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—Ä–∞—à–∏–≤–∞–ª
        (–∏–Ω–∞—á–µ "random"/"incremental" –º–æ–≥—É—Ç –Ω–µ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è).
        """
        if kwargs["mode"] != "single_image":
            return float("NaN")
        else:
            path    = kwargs["path"]
            index   = kwargs["index"]
            pattern = kwargs["pattern"]
            mode    = kwargs["mode"]
            # –î–ª—è single_image –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç—å –ø–µ—Ä–µ—Å—á—ë—Ç, –∫–æ–≥–¥–∞ —á—Ç–æ-—Ç–æ –º–µ–Ω—è–µ—Ç—Å—è
            return (path, pattern, mode, index)

    # --------------------------------------------------------------------
    # –°–ª—É–∂–µ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    # --------------------------------------------------------------------
    def _scan_directory(self, directory_path, pattern):
        exts = [".png", ".jpg", ".jpeg", ".bmp", ".webp", ".gif", ".tiff"]
        files = []
        for file_name in glob.glob(os.path.join(directory_path, pattern), recursive=True):
            if os.path.splitext(file_name)[1].lower() in exts:
                files.append(os.path.abspath(file_name))
        files.sort()
        return files

    def _load_as_tensor(self, file_path, allow_rgba=False):
        from PIL import Image, ImageOps
        import numpy as np
        import torch

        pil_img = Image.open(file_path)
        pil_img = ImageOps.exif_transpose(pil_img)

        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ RGB, –µ—Å–ª–∏ –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω RGBA
        if not allow_rgba and pil_img.mode != "RGB":
            pil_img = pil_img.convert("RGB")
        elif allow_rgba and pil_img.mode == "RGBA":
            # –û—Å—Ç–∞–≤–ª—è–µ–º RGBA, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑—Ä–µ—à–∏–ª
            pass
        else:
            # –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ñ–æ—Ä–º–∞—Ç P, LA –∏ —Ç.–¥., –ø—Ä–∏–≤–æ–¥–∏–º –∫ RGB
            if pil_img.mode not in ["RGB", "RGBA"]:
                pil_img = pil_img.convert("RGB")

        np_img = np.array(pil_img).astype(np.float32) / 255.0
        # batch dimension
        tensor = torch.from_numpy(np_img)[None, ]
        return tensor





class LoadSingleImageFromPath:
    """
    –£–∑–µ–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –û–î–ù–û–ì–û –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ü–û–õ–ù–û–ú–£ –ø—É—Ç–∏, –≤–∫–ª—é—á–∞—è –∏–º—è –∏ —Ñ–æ—Ä–º–∞—Ç.
    –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–∞:  /home/user/images/test.png
    """

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "image_path": ("STRING", {"default": ""})
            }
        }

    RETURN_TYPES = ("IMAGE",)
    RETURN_NAMES = ("image",)
    FUNCTION = "load_image"
    CATEGORY = "üòé SnJake/Utils"

    def load_image(self, image_path):
        if not os.path.exists(image_path):
            print(f"[LoadSingleImageFromPath] –§–∞–π–ª '{image_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return (None,)

        pil_img = Image.open(image_path)
        pil_img = ImageOps.exif_transpose(pil_img)
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å—ë –∫ RGB –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if pil_img.mode != "RGB":
            pil_img = pil_img.convert("RGB")

        np_img = np.array(pil_img).astype(np.float32) / 255.0
        tensor = torch.from_numpy(np_img)[None,]
        return (tensor,)




class SaveImageToPath:
    """
    –£–∑–µ–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å.
    –ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏: D:\Stable diffusion\result_7.png
    –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    """

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "image": ("IMAGE", {}),
                "save_path": ("STRING", {"default": "D:\\Stable diffusion\\result_7.png"}),
                "save_workflow": ("BOOLEAN", {"default": True, "tooltip": "–°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ workflow (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ) –≤–Ω—É—Ç—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."}), # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            },
            "hidden": { # –°–∫—Ä—ã—Ç—ã–µ –≤—Ö–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ workflow –æ—Ç ComfyUI
                "prompt": "PROMPT",
                "extra_pnginfo": "EXTRA_PNGINFO"
            },
        }

    RETURN_TYPES = ()
    RETURN_NAMES = ()
    FUNCTION = "save_image"
    CATEGORY = "üòé SnJake/Utils"
    OUTPUT_NODE = True

    def save_image(self, image, save_path, save_workflow, prompt=None, extra_pnginfo=None):
        if image is None:
            print("[SaveImageToPath] –ù–µ—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!")
            return ()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pathlib –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—É—Ç–∏
        try:
            path_obj = Path(save_path.strip().strip('"').strip("'"))
            # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –ø—É—Ç—å –∫ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É
            full_path = path_obj.resolve()
            print(f"[SaveImageToPath] –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {full_path}")
        except Exception as e:
            print(f"[SaveImageToPath] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—É—Ç–∏: {e}")
            return ()

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            full_path.parent.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            print(f"[SaveImageToPath] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {full_path.parent}: {e}")
            return ()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º torch.Tensor -> numpy -> PIL Image
        try:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±–∞—Ç—á–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ
            # ComfyUI –æ–±—ã—á–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç –±–∞—Ç—á –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
            # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è [0] –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±–∞—Ç—á–∞,
            # –∏–ª–∏ —á—Ç–æ —É–∑–µ–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–¥–Ω–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∑–∞ —Ä–∞–∑.
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –±–∞—Ç—á–∞, –ª–æ–≥–∏–∫—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–∏–∫–ª –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞).
            # –î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
            img_tensor = image[0] 
            np_img = img_tensor.cpu().numpy()
            
            # –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç [C,H,W]
            if len(np_img.shape) == 3 and np_img.shape[0] in [1, 3, 4]: # (C, H, W)
                np_img = np.transpose(np_img, (1, 2, 0)) # (H, W, C)
            
            np_img = (np_img * 255.0).clip(0, 255).astype(np.uint8)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞ –∫–∞–Ω–∞–ª–æ–≤
            if np_img.ndim == 2: # Grayscale
                mode = "L"
            elif np_img.shape[2] == 3: # RGB
                mode = "RGB"
            elif np_img.shape[2] == 4: # RGBA
                mode = "RGBA"
            elif np_img.shape[2] == 1: # –û–¥–Ω–æ–∫–∞–Ω–∞–ª—å–Ω–æ–µ, –Ω–æ –Ω–µ L (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å–∫–∞)
                np_img = np_img.squeeze(axis=2) # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
                mode = "L" # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ Grayscale
            else:
                print(f"[SaveImageToPath] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {np_img.shape[2]}")
                return ()
                
            pil_img = Image.fromarray(np_img, mode=mode)
        except Exception as e:
            print(f"[SaveImageToPath] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return ()

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è workflow
        metadata_to_save = None
        if save_workflow:
            metadata_to_save = PngInfo()
            if prompt is not None:
                metadata_to_save.add_text("prompt", json.dumps(prompt))
            if extra_pnginfo is not None and isinstance(extra_pnginfo, dict):
                for k, v in extra_pnginfo.items():
                    metadata_to_save.add_text(k, json.dumps(v))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        try:
            pil_img.save(str(full_path), pnginfo=metadata_to_save)
            print(f"[SaveImageToPath] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {full_path}")
            if save_workflow:
                if prompt or extra_pnginfo:
                     print(f"[SaveImageToPath] Workflow data has been included in the image.")
                else:
                     print(f"[SaveImageToPath] Workflow saving was enabled, but no workflow data (prompt/extra_pnginfo) was available to save.")
            else:
                print(f"[SaveImageToPath] Workflow data was not saved to the image (option disabled).")
        except Exception as e:
            print(f"[SaveImageToPath] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

        return ()



class ImageRouter:
    CATEGORY = "üòé SnJake/Utils"

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "select": ("INT", {
                    "default": 1,
                    "min": 1,
                    "max": 10,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤
                    "step": 1,
                    "tooltip": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≤—ã—Ö–æ–¥–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
                }),
                "image_in": ("IMAGE", {
                    "tooltip": "–í—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
                }),
            },
            "optional": {
                "max_outputs": ("INT", {
                    "default": 10,
                    "min": 1,
                    "max": 10,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å RETURN_TYPES
                    "step": 1,
                    "tooltip": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–æ–≤. –ù–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 10."
                }),
            },
            "hidden": {
                "unique_id": "UNIQUE_ID",
                "prompt": "PROMPT",
            },
        }

    RETURN_TYPES = tuple(["IMAGE"] * 10)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º 10 –≤—ã—Ö–æ–¥–æ–≤ —Ç–∏–ø–∞ IMAGE
    RETURN_NAMES = tuple([f"output{i+1}" for i in range(10)])  # –ò–º–µ–Ω–∞ –≤—ã—Ö–æ–¥–æ–≤: output1, output2, ..., output10
    FUNCTION = "switch_image"

    def switch_image(self, select, image_in, max_outputs=10, unique_id=None, prompt=None, **kwargs):
        """
        –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤—ã—Ö–æ–¥.
        –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã—Ö–æ–¥—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è.
        """
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ max_outputs –¥–æ 10
        max_outputs = max(1, min(max_outputs, 10))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ select –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if not 1 <= select <= max_outputs:
            raise ValueError(f"–ó–Ω–∞—á–µ–Ω–∏–µ 'select' ({select}) –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ {max_outputs}.")

        outputs = []
        for i in range(1, max_outputs + 1):
            if i == select:
                outputs.append(image_in)
            else:
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã—Ö–æ–¥—ã
                outputs.append(ExecutionBlocker(None))

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤—ã—Ö–æ–¥—ã –∑–Ω–∞—á–µ–Ω–∏–µ–º None, –µ—Å–ª–∏ max_outputs –º–µ–Ω—å—à–µ 10
        while len(outputs) < 10:
            outputs.append(None)

        return tuple(outputs)





class StringToNumber:
    """
    –£–∑–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –±–µ—Ä—ë—Ç —Å—Ç—Ä–æ–∫—É (STRING) –∏ –ø—Ä–æ–±—É–µ—Ç —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ int –∏ float.
    –ù–∞ –≤—ã—Ö–æ–¥–µ –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è: int_value, float_value
    """

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "input_string": ("STRING", {"default": "123"})
            }
        }

    RETURN_TYPES = ("INT","FLOAT")
    RETURN_NAMES = ("as_int","as_float")
    FUNCTION = "convert"
    CATEGORY = "üòé SnJake/Utils"

    def convert(self, input_string):
        try:
            i_val = int(input_string)
        except:
            i_val = 0
            print(f"[StringToNumber] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{input_string}' –∫ int. –°—Ç–∞–≤–∏–º 0.")

        try:
            f_val = float(input_string)
        except:
            f_val = 0.0
            print(f"[StringToNumber] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{input_string}' –∫ float. –°—Ç–∞–≤–∏–º 0.0.")

        return (i_val, f_val)




class StringReplace:
    """
    –£–∑–µ–ª, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–º–µ–Ω—è–µ—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ç–µ–∫—Å—Ç–µ (source_string) –ø–æ–¥—Å—Ç—Ä–æ–∫—É (old_string)
    –Ω–∞ (new_string). –ü—Ä–∏–º–µ—Ä:
      source_string = "Hello"
      old_string    = "ell"
      new_string    = "bob"
      => "Hbobo"
    """

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "source_string": ("STRING", {"default": "Hello"}),
                "old_string":    ("STRING", {"default": "ell"}),
                "new_string":    ("STRING", {"default": "bob"}),
            }
        }

    RETURN_TYPES = ("STRING",)
    RETURN_NAMES = ("replaced_string",)
    FUNCTION = "string_replace"
    CATEGORY = "üòé SnJake/Utils"

    def string_replace(self, source_string, old_string, new_string):
        if source_string is None:
            return ("",)
        result = source_string.replace(old_string, new_string)
        return (result,)





class RandomIntNode:
    CATEGORY = "üòé SnJake/Utils"
    FUNCTION = "generate"
    RETURN_TYPES = ("INT",)
    RETURN_NAMES = ("random_int",)

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "min_value": ("INT", {"default": 0, "min": -10000, "max": 10000, "step": 1, "tooltip": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"}),
                "max_value": ("INT", {"default": 10, "min": -10000, "max": 10000, "step": 1, "tooltip": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"})
            }
        }

    @classmethod
    def IS_CHANGED(cls, *args, **kwargs):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç NaN, —á—Ç–æ–±—ã —É–∑–µ–ª –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–ª—Å—è –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫—ç—à
        return float("NaN")

    def generate(self, min_value, max_value):
        result = random.randint(min_value, max_value)
        return (result,)


class RandomFloatNode:
    CATEGORY = "üòé SnJake/Utils"
    FUNCTION = "generate"
    RETURN_TYPES = ("FLOAT",)
    RETURN_NAMES = ("random_float",)

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "min_value": ("FLOAT", {"default": 0.0, "min": -10000.0, "max": 10000.0, "step": 0.01, "tooltip": "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"}),
                "max_value": ("FLOAT", {"default": 1.0, "min": -10000.0, "max": 10000.0, "step": 0.01, "tooltip": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"})
            }
        }

    @classmethod
    def IS_CHANGED(cls, *args, **kwargs):
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è NaN
        return float("NaN")

    def generate(self, min_value, max_value):
        value = random.uniform(min_value, max_value)
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, —á—Ç–æ–±—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, 0.53228 –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª–æ—Å—å –≤ 0.53
        result = round(value, 2)
        return (result,)