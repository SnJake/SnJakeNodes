from comfy_execution.graph import ExecutionBlocker


class LoraSwitchDynamic:
    """
    –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –¥–ª—è N –ø–∞—Ä MODEL –∏ CLIP.
    –í—ã–±–∏—Ä–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–∞—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ 'select' –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –µ–µ –Ω–∞ –≤—ã—Ö–æ–¥.
    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –∑–∞–¥–∞–µ—Ç—Å—è –≤ –≤–∏–¥–∂–µ—Ç–µ 'pairs' –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –ø–æ –∫–Ω–æ–ø–∫–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
    """
    
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "select": ("INT", {"default": 1, "min": 1, "max": 999}),
                # –≠—Ç–æ—Ç –≤–∏–¥–∂–µ—Ç –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤—Ö–æ–¥–æ–≤ –≤ JS
                "pairs": ("INT", {"default": 6, "min": 1, "max": 99}),
            },
            # –ú—ã –æ–ø—Ä–µ–¥–µ–ª–∏–º 1-—é –ø–∞—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ–±–∞–≤–∏—Ç JS
            "optional": {
                "model_1": ("MODEL",),
                "clip_1": ("CLIP",),
            }
        }

    RETURN_TYPES = ("MODEL", "CLIP")
    RETURN_NAMES = ("model", "clip")
    FUNCTION = "switch_pair"
    CATEGORY = "üòé SnJake/LoRA"

    def switch_pair(self, select, pairs, **kwargs):
        """
        –õ–æ–≥–∏–∫–∞ –Ω–æ–¥—ã. 'pairs' –∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö.
        """
        model_key = f"model_{select}"
        clip_key = f"clip_{select}"

        selected_model = kwargs.get(model_key)
        selected_clip = kwargs.get(clip_key)
        
        if selected_model is None:
            print(f"[LoraSwitchDynamic] Warning: Input '{model_key}' is not connected but selected. Passing through 'None'.")
        
        if selected_clip is None:
            print(f"[LoraSwitchDynamic] Warning: Input '{clip_key}' is not connected but selected. Passing through 'None'.")

        return (selected_model, selected_clip)




class LoraBlocker:
    """
    –ë–ª–æ–∫–∏—Ä—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–∏–≥–Ω–∞–ª MODEL –∏ CLIP.
    –ï—Å–ª–∏ 'select' –†–ê–í–ï–ù 'pass_on_select', —Å–∏–≥–Ω–∞–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç.
    –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –Ω–æ–¥ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è.
    """
    
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "model": ("MODEL",),
                "clip": ("CLIP",),
                "select": ("INT", {"default": 1, "min": 1, "max": 999}),
                "pass_on_select": ("INT", {"default": 1, "min": 1, "max": 999, "tooltip": "–ó–Ω–∞—á–µ–Ω–∏–µ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —Å–∏–≥–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏"}),
            },
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—ã—Ç—ã–π –≤—Ö–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –Ω–æ–¥—ã
            "hidden": {"unique_id": "UNIQUE_ID"},
        }

    RETURN_TYPES = ("MODEL", "CLIP")
    FUNCTION = "block_or_pass"
    CATEGORY = "üòé SnJake/LoRA"

    def block_or_pass(self, model, clip, select, pass_on_select, unique_id):
        if select == pass_on_select:
            print(f"[LoraBlocker ID: {unique_id}] Pass -> (select: {select}, pass_on: {pass_on_select})")
            return (model, clip)
        else:
            print(f"[LoraBlocker ID: {unique_id}] Block -> (select: {select}, pass_on: {pass_on_select})")
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –û–î–ò–ù –æ–±—ä–µ–∫—Ç ExecutionBlocker. ComfyUI —Å–∞–º –∑–∞–±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Å–µ –≤—ã—Ö–æ–¥—ã.
            return ExecutionBlocker(None)
