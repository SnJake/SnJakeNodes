#
# switch_nodes.py
#

class SnJakeSwitch:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π. –û–Ω –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω –∏–∑ –¥–≤—É—Ö –≤—Ö–æ–¥–æ–≤ 
    (on_true –∏–ª–∏ on_false) –Ω–∞ –≤—ã—Ö–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è boolean-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è 'select'.
    """
    FUNCTION = "do_switch"
    CATEGORY = "üòé SnJake/Utils"

    @classmethod
    def INPUT_TYPES(cls):
        # –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–ª–∞—Å—Å–∞—Ö —á–µ—Ä–µ–∑ RETURN_TYPES
        return {
            "required": {
                "select": ("BOOLEAN", {"default": True, "label_on": "true", "label_off": "false"}),
                "on_true": (cls.RETURN_TYPES[0], {}),
                "on_false": (cls.RETURN_TYPES[0], {}),
            }
        }

    def do_switch(self, select, on_true, on_false):
        if select:
            return (on_true,)
        else:
            return (on_false,)

class SnJakeImageSwitch(SnJakeSwitch):
    RETURN_TYPES = ("IMAGE",)
    RETURN_NAMES = ("image",)

class SnJakeMaskSwitch(SnJakeSwitch):
    RETURN_TYPES = ("MASK",)
    RETURN_NAMES = ("mask",)

class SnJakeLatentSwitch(SnJakeSwitch):
    RETURN_TYPES = ("LATENT",)
    RETURN_NAMES = ("latent",)

class SnJakeConditioningSwitch(SnJakeSwitch):
    RETURN_TYPES = ("CONDITIONING",)
    RETURN_NAMES = ("conditioning",)

class SnJakeStringSwitch(SnJakeSwitch):
    RETURN_TYPES = ("STRING",)
    RETURN_NAMES = ("string",)

    @classmethod
    def INPUT_TYPES(cls):
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        return {
            "required": {
                "select": ("BOOLEAN", {"default": True, "label_on": "true", "label_off": "false"}),
                "on_true": ("STRING", {"default": "", "multiline": True}),
                "on_false": ("STRING", {"default": "", "multiline": True}),
            }
        }

class AlwaysEqualProxy(str):
    """
    –ü—Ä–æ–∫—Å–∏-–∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è "any" —Ç–∏–ø–∞ (*), –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ.
    """
    def __eq__(self, _):
        return True

    def __ne__(self, _):
        return False

any_type = AlwaysEqualProxy("*")

class SnJakeAnySwitch:
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –æ—Ç–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞.
    """
    FUNCTION = "do_switch"
    CATEGORY = "üòé SnJake/Utils"
    RETURN_TYPES = (any_type,)
    RETURN_NAMES = ("output",)
    
    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "select": ("BOOLEAN", {"default": True, "label_on": "true", "label_off": "false"}),
                "on_true": (any_type, {"forceInput": True}),
                "on_false": (any_type, {"forceInput": True}),
            }
        }

    def do_switch(self, select, on_true, on_false):
        if select:
            return (on_true,)
        else:
            return (on_false,)
