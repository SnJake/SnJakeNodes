import json
from collections import Counter
from safetensors import safe_open
import folder_paths # –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏ –≤ ComfyUI

class LoraMetadataParser:
    """
    –£–∑–µ–ª –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è, –ø–æ–¥—Å—á–µ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–≥–æ–≤ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞ LoRA.
    –û–Ω –Ω–∞—Ö–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤, –∞–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å —Ç–µ–≥–∞–º–∏ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º,
    –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ —É–±—ã–≤–∞–Ω–∏—é.
    """
    def __init__(self):
        pass

    @classmethod
    def INPUT_TYPES(cls):
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–∑–ª–∞.
        –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ LoRA-—Ñ–∞–π–ª–∞–º–∏.
        """
        return {
            "required": {
                # –°–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ (COMBO) –∏–∑ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ 'loras'
                "lora_name": (folder_paths.get_filename_list("loras"), ),
            }
        }

    # –¢–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —Å—Ç—Ä–æ–∫–∞
    RETURN_TYPES = ("STRING",)
    # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–∫–µ—Ç–∞
    RETURN_NAMES = ("tags_with_count",)
    # –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è
    FUNCTION = "get_lora_tags"

    # –ö–∞—Ç–µ–≥–æ—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π —É–∑–µ–ª –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –º–µ–Ω—é ComfyUI
    CATEGORY = "üòé SnJake/Utils"

    def get_lora_tags(self, lora_name: str):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–∑–ª–∞.
        –ß–∏—Ç–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ LoRA –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É —Ç–µ–≥–æ–≤.
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É LoRA
        lora_path = folder_paths.get_full_path("loras", lora_name)
        if not lora_path:
            return (f"–û—à–∏–±–∫–∞: –§–∞–π–ª LoRA –Ω–µ –Ω–∞–π–¥–µ–Ω: {lora_name}",)

        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª .safetensors –Ω–∞ CPU, —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å VRAM
            with safe_open(lora_path, framework="pt", device="cpu") as f:
                metadata = f.metadata()
        except Exception as e:
            return (f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ .safetensors: {e}",)

        if metadata is None:
            return ("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ LoRA.",)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —á–∞—Å—Ç–æ—Ç–æ–π —Ç–µ–≥–æ–≤
        tag_freq_str = metadata.get("ss_tag_frequency")
        if not tag_freq_str:
            return ("–ö–ª—é—á 'ss_tag_frequency' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.",)

        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON-—Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç Python
            tag_freq_data = json.loads(tag_freq_str)
        except json.JSONDecodeError:
            return ("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON –∏–∑ 'ss_tag_frequency'.",)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Counter –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–≥–æ–≤
        all_tags = Counter()
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –Ω–∞–±–æ—Ä–∞–º –¥–∞–Ω–Ω—ã—Ö –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        # (–Ω–∞–ø—Ä–∏–º–µ—Ä, "5_atou woman" –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ)
        for _dataset_key, tags_dict in tag_freq_data.items():
            if isinstance(tags_dict, dict):
                 all_tags.update(tags_dict)

        if not all_tags:
            return ("–¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ 'ss_tag_frequency'.",)

        # –û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
        output_lines = []
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        for tag, count in all_tags.most_common():
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
            clean_tag = tag.replace('(', '').replace(')', '').strip()
            output_lines.append(f"{clean_tag}: {count}")
        
        output_string = "\n".join(output_lines)

        return (output_string,)
