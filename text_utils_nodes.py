#
# text_utils_nodes.py
#

class SnJakeTextConcatenate:
    """
    –ù–æ–¥–∞ –¥–ª—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏) –¥–æ —á–µ—Ç—ã—Ä–µ—Ö —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è (–¥–µ–ª–∏–º–µ—Ç–µ—Ä–∞). –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.
    """
    
    FUNCTION = "concatenate"
    CATEGORY = "üòé SnJake/Utils"
    RETURN_TYPES = ("STRING",)
    RETURN_NAMES = ("combined_text",)

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "text_1": ("STRING", {"default": "", "multiline": True}),
                "text_2": ("STRING", {"default": "", "multiline": True}),
                "delimiter": ("STRING", {"default": ", "}), # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∑–∞–ø—è—Ç–∞—è —Å –ø—Ä–æ–±–µ–ª–æ–º
            },
            "optional": {
                "text_3": ("STRING", {"default": "", "multiline": True}),
                "text_4": ("STRING", {"default": "", "multiline": True}),
            }
        }

    def concatenate(self, text_1, text_2, delimiter, text_3="", text_4=""):
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
        parts = [text_1, text_2, text_3, text_4]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        non_empty_parts = [part for part in parts if part]
        
        # –°–æ–µ–¥–∏–Ω—è–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        result = delimiter.join(non_empty_parts)
        
        return (result,)

class SnJakeMultilineText:
    """
    –ü—Ä–æ—Å—Ç–∞—è –Ω–æ–¥–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –±–æ–ª—å—à–æ–≥–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    """

    FUNCTION = "get_text"
    CATEGORY = "üòé SnJake/Utils"
    RETURN_TYPES = ("STRING",)
    RETURN_NAMES = ("text",)

    @classmethod
    def INPUT_TYPES(cls):
        return {
            "required": {
                "text": ("STRING", {
                    "default": "",
                    "multiline": True, # –≠—Ç–æ —Å–≤–æ–π—Å—Ç–≤–æ –¥–µ–ª–∞–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ –±–æ–ª—å—à–∏–º
                }),
            }
        }

    def get_text(self, text):
        # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        return (text,)
